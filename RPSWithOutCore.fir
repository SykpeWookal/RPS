circuit RPSWithOutCore :
  module Cache :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<32>, flip r_req : UInt<1>, flip w_req : UInt<1>, flip writedata : UInt<32>, flip writeMask : UInt<4>, outdata : UInt<32>, miss : UInt<1>, mem_addr : UInt<11>, mem_rd_req : UInt<1>, mem_wr_req : UInt<1>, mem_wr_line : UInt<32>[2], flip mem_rd_line : UInt<32>[2], flip cacheAXI_gnt : UInt<1>}

    wire _CacheMem_WIRE : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_1 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_1[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_1[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_2 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_2[0] <= _CacheMem_WIRE @[Cache.scala 53:69]
    _CacheMem_WIRE_2[1] <= _CacheMem_WIRE_1 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_3 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_3[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_3[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_4 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_4[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_4[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_5 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_5[0] <= _CacheMem_WIRE_3 @[Cache.scala 53:69]
    _CacheMem_WIRE_5[1] <= _CacheMem_WIRE_4 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_6 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_6[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_6[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_7 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_7[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_7[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_8 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_8[0] <= _CacheMem_WIRE_6 @[Cache.scala 53:69]
    _CacheMem_WIRE_8[1] <= _CacheMem_WIRE_7 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_9 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_9[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_9[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_10 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_10[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_10[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_11 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_11[0] <= _CacheMem_WIRE_9 @[Cache.scala 53:69]
    _CacheMem_WIRE_11[1] <= _CacheMem_WIRE_10 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_12 : UInt<32>[2][2][4] @[Cache.scala 53:33]
    _CacheMem_WIRE_12[0] <= _CacheMem_WIRE_2 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[1] <= _CacheMem_WIRE_5 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[2] <= _CacheMem_WIRE_8 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[3] <= _CacheMem_WIRE_11 @[Cache.scala 53:33]
    reg CacheMem : UInt<32>[2][2][4], clock with :
      reset => (reset, _CacheMem_WIRE_12) @[Cache.scala 53:25]
    wire _cache_tags_WIRE : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_1 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_1[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_1[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_2 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_2[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_2[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_3 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_3[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_3[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_4 : UInt<9>[2][4] @[Cache.scala 56:35]
    _cache_tags_WIRE_4[0] <= _cache_tags_WIRE @[Cache.scala 56:35]
    _cache_tags_WIRE_4[1] <= _cache_tags_WIRE_1 @[Cache.scala 56:35]
    _cache_tags_WIRE_4[2] <= _cache_tags_WIRE_2 @[Cache.scala 56:35]
    _cache_tags_WIRE_4[3] <= _cache_tags_WIRE_3 @[Cache.scala 56:35]
    reg cache_tags : UInt<9>[2][4], clock with :
      reset => (reset, _cache_tags_WIRE_4) @[Cache.scala 56:27]
    wire _valid_WIRE : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_1 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_1[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_1[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_2 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_2[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_2[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_3 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_3[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_3[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_4 : UInt<1>[2][4] @[Cache.scala 57:30]
    _valid_WIRE_4[0] <= _valid_WIRE @[Cache.scala 57:30]
    _valid_WIRE_4[1] <= _valid_WIRE_1 @[Cache.scala 57:30]
    _valid_WIRE_4[2] <= _valid_WIRE_2 @[Cache.scala 57:30]
    _valid_WIRE_4[3] <= _valid_WIRE_3 @[Cache.scala 57:30]
    reg valid : UInt<1>[2][4], clock with :
      reset => (reset, _valid_WIRE_4) @[Cache.scala 57:22]
    wire _dirty_WIRE : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_1 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_1[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_1[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_2 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_2[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_2[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_3 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_3[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_3[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_4 : UInt<1>[2][4] @[Cache.scala 58:30]
    _dirty_WIRE_4[0] <= _dirty_WIRE @[Cache.scala 58:30]
    _dirty_WIRE_4[1] <= _dirty_WIRE_1 @[Cache.scala 58:30]
    _dirty_WIRE_4[2] <= _dirty_WIRE_2 @[Cache.scala 58:30]
    _dirty_WIRE_4[3] <= _dirty_WIRE_3 @[Cache.scala 58:30]
    reg dirty : UInt<1>[2][4], clock with :
      reset => (reset, _dirty_WIRE_4) @[Cache.scala 58:22]
    node word_addr = bits(io.addr, 1, 0) @[Cache.scala 63:26]
    node line_addr = bits(io.addr, 2, 2) @[Cache.scala 64:26]
    node set_addr = bits(io.addr, 4, 3) @[Cache.scala 65:25]
    node tag_addr = bits(io.addr, 13, 5) @[Cache.scala 66:25]
    node unused_addr = bits(io.addr, 31, 14) @[Cache.scala 67:28]
    reg mem_rd_set_addr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 70:32]
    reg mem_rd_tag_addr : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Cache.scala 71:32]
    node mem_rd_addr = cat(mem_rd_tag_addr, mem_rd_set_addr) @[Cat.scala 31:58]
    reg mem_wr_addr : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[Cache.scala 73:28]
    wire cache_Hit : UInt<1>
    cache_Hit <= UInt<1>("h0")
    wire way_hit : UInt
    way_hit <= UInt<1>("h0")
    node _T = or(io.w_req, io.r_req) @[Cache.scala 84:17]
    when _T : @[Cache.scala 84:28]
      cache_Hit <= UInt<1>("h0") @[Cache.scala 85:19]
      way_hit <= UInt<1>("h0") @[Cache.scala 86:17]
      node _T_1 = eq(valid[set_addr][UInt<1>("h0")], UInt<1>("h1")) @[Cache.scala 88:32]
      node _T_2 = eq(cache_tags[set_addr][UInt<1>("h0")], tag_addr) @[Cache.scala 88:70]
      node _T_3 = and(_T_1, _T_2) @[Cache.scala 88:42]
      when _T_3 : @[Cache.scala 88:82]
        cache_Hit <= UInt<1>("h1") @[Cache.scala 89:19]
        way_hit <= UInt<1>("h0") @[Cache.scala 90:17]
      node _T_4 = eq(valid[set_addr][UInt<1>("h1")], UInt<1>("h1")) @[Cache.scala 88:32]
      node _T_5 = eq(cache_tags[set_addr][UInt<1>("h1")], tag_addr) @[Cache.scala 88:70]
      node _T_6 = and(_T_4, _T_5) @[Cache.scala 88:42]
      when _T_6 : @[Cache.scala 88:82]
        cache_Hit <= UInt<1>("h1") @[Cache.scala 89:19]
        way_hit <= UInt<1>("h1") @[Cache.scala 90:17]
    reg cacheState : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 96:27]
    wire wayout_choice : UInt<1>
    wayout_choice <= UInt<1>("h0")
    wire _FIFO_Choice_WIRE : UInt<32>[4] @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[0] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[1] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[2] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[3] <= UInt<32>("h0") @[Cache.scala 103:38]
    reg FIFO_Choice : UInt<32>[4], clock with :
      reset => (reset, _FIFO_Choice_WIRE) @[Cache.scala 103:30]
    node _T_7 = asUInt(UInt<2>("h3")) @[Cache.scala 104:23]
    node _T_8 = asUInt(cacheState) @[Cache.scala 104:23]
    node _T_9 = eq(_T_7, _T_8) @[Cache.scala 104:23]
    when _T_9 : @[Cache.scala 104:23]
      node _FIFO_Choice_T = add(FIFO_Choice[set_addr], UInt<1>("h1")) @[Cache.scala 106:57]
      node _FIFO_Choice_T_1 = tail(_FIFO_Choice_T, 1) @[Cache.scala 106:57]
      node _FIFO_Choice_T_2 = rem(_FIFO_Choice_T_1, UInt<2>("h2")) @[Cache.scala 106:63]
      FIFO_Choice[set_addr] <= _FIFO_Choice_T_2 @[Cache.scala 106:31]
    wayout_choice <= FIFO_Choice[set_addr] @[Cache.scala 109:19]
    wire out : UInt<32>
    out <= UInt<32>("h0")
    wire _mem_wr_line_WIRE : UInt<32>[2] @[Cache.scala 122:36]
    _mem_wr_line_WIRE[0] <= UInt<32>("h0") @[Cache.scala 122:36]
    _mem_wr_line_WIRE[1] <= UInt<32>("h0") @[Cache.scala 122:36]
    reg mem_wr_line : UInt<32>[2], clock with :
      reset => (reset, _mem_wr_line_WIRE) @[Cache.scala 122:28]
    node _T_10 = asUInt(UInt<1>("h0")) @[Cache.scala 124:21]
    node _T_11 = asUInt(cacheState) @[Cache.scala 124:21]
    node _T_12 = eq(_T_10, _T_11) @[Cache.scala 124:21]
    when _T_12 : @[Cache.scala 124:21]
      when cache_Hit : @[Cache.scala 126:22]
        node _T_13 = eq(io.r_req, UInt<1>("h1")) @[Cache.scala 127:23]
        when _T_13 : @[Cache.scala 127:34]
          node _out_T = or(way_hit, UInt<1>("h0"))
          node _out_T_1 = bits(_out_T, 0, 0)
          out <= CacheMem[set_addr][_out_T_1][line_addr] @[Cache.scala 129:15]
        else :
          node _T_14 = eq(io.w_req, UInt<1>("h1")) @[Cache.scala 130:29]
          when _T_14 : @[Cache.scala 130:40]
            node _T_15 = eq(UInt<1>("h1"), io.writeMask) @[Cache.scala 131:31]
            when _T_15 : @[Cache.scala 131:31]
              node _T_16 = or(way_hit, UInt<1>("h0"))
              node _T_17 = bits(_T_16, 0, 0)
              node _CacheMem_T = bits(io.writedata, 7, 0) @[Cache.scala 133:83]
              node _CacheMem_T_1 = cat(UInt<24>("h0"), _CacheMem_T) @[Cat.scala 31:58]
              CacheMem[set_addr][_T_17][line_addr] <= _CacheMem_T_1 @[Cache.scala 133:54]
            else :
              node _T_18 = eq(UInt<2>("h3"), io.writeMask) @[Cache.scala 131:31]
              when _T_18 : @[Cache.scala 131:31]
                node _T_19 = or(way_hit, UInt<1>("h0"))
                node _T_20 = bits(_T_19, 0, 0)
                node _CacheMem_T_2 = bits(io.writedata, 15, 0) @[Cache.scala 136:83]
                node _CacheMem_T_3 = cat(UInt<16>("h0"), _CacheMem_T_2) @[Cat.scala 31:58]
                CacheMem[set_addr][_T_20][line_addr] <= _CacheMem_T_3 @[Cache.scala 136:54]
              else :
                node _T_21 = eq(UInt<4>("hf"), io.writeMask) @[Cache.scala 131:31]
                when _T_21 : @[Cache.scala 131:31]
                  node _T_22 = or(way_hit, UInt<1>("h0"))
                  node _T_23 = bits(_T_22, 0, 0)
                  CacheMem[set_addr][_T_23][line_addr] <= io.writedata @[Cache.scala 139:54]
            node _T_24 = or(way_hit, UInt<1>("h0"))
            node _T_25 = bits(_T_24, 0, 0)
            dirty[set_addr][_T_25] <= UInt<1>("h1") @[Cache.scala 142:36]
          else :
            cacheState <= UInt<1>("h0") @[Cache.scala 144:22]
      else :
        node _T_26 = or(io.w_req, io.r_req) @[Cache.scala 147:23]
        when _T_26 : @[Cache.scala 147:34]
          node _T_27 = eq(valid[set_addr][wayout_choice], UInt<1>("h1")) @[Cache.scala 148:47]
          node _T_28 = eq(dirty[set_addr][wayout_choice], UInt<1>("h1")) @[Cache.scala 148:92]
          node _T_29 = and(_T_27, _T_28) @[Cache.scala 148:58]
          when _T_29 : @[Cache.scala 148:103]
            cacheState <= UInt<1>("h1") @[Cache.scala 149:24]
            node _mem_wr_addr_T = cat(cache_tags[set_addr][wayout_choice], set_addr) @[Cat.scala 31:58]
            mem_wr_addr <= _mem_wr_addr_T @[Cache.scala 150:25]
            mem_wr_line <= CacheMem[set_addr][wayout_choice] @[Cache.scala 151:25]
          else :
            cacheState <= UInt<2>("h2") @[Cache.scala 153:24]
          mem_rd_tag_addr <= tag_addr @[Cache.scala 155:27]
          mem_rd_set_addr <= set_addr @[Cache.scala 156:27]
    else :
      node _T_30 = asUInt(UInt<1>("h1")) @[Cache.scala 124:21]
      node _T_31 = asUInt(cacheState) @[Cache.scala 124:21]
      node _T_32 = eq(_T_30, _T_31) @[Cache.scala 124:21]
      when _T_32 : @[Cache.scala 124:21]
        node _T_33 = eq(io.cacheAXI_gnt, UInt<1>("h1")) @[Cache.scala 161:28]
        when _T_33 : @[Cache.scala 161:39]
          cacheState <= UInt<2>("h2") @[Cache.scala 162:20]
      else :
        node _T_34 = asUInt(UInt<2>("h2")) @[Cache.scala 124:21]
        node _T_35 = asUInt(cacheState) @[Cache.scala 124:21]
        node _T_36 = eq(_T_34, _T_35) @[Cache.scala 124:21]
        when _T_36 : @[Cache.scala 124:21]
          node _T_37 = eq(io.cacheAXI_gnt, UInt<1>("h1")) @[Cache.scala 166:28]
          when _T_37 : @[Cache.scala 166:39]
            cacheState <= UInt<2>("h3") @[Cache.scala 167:20]
        else :
          node _T_38 = asUInt(UInt<2>("h3")) @[Cache.scala 124:21]
          node _T_39 = asUInt(cacheState) @[Cache.scala 124:21]
          node _T_40 = eq(_T_38, _T_39) @[Cache.scala 124:21]
          when _T_40 : @[Cache.scala 124:21]
            cacheState <= UInt<1>("h0") @[Cache.scala 171:18]
            cache_tags[mem_rd_set_addr][wayout_choice] <= mem_rd_tag_addr @[Cache.scala 172:50]
            valid[mem_rd_set_addr][wayout_choice] <= UInt<1>("h1") @[Cache.scala 173:45]
            dirty[mem_rd_set_addr][wayout_choice] <= UInt<1>("h0") @[Cache.scala 174:45]
            CacheMem[mem_rd_set_addr][wayout_choice][UInt<1>("h0")] <= io.mem_rd_line[UInt<1>("h0")] @[Cache.scala 176:55]
            CacheMem[mem_rd_set_addr][wayout_choice][UInt<1>("h1")] <= io.mem_rd_line[UInt<1>("h1")] @[Cache.scala 176:55]
    node _io_mem_rd_req_T = eq(cacheState, UInt<2>("h2")) @[Cache.scala 185:35]
    node _io_mem_rd_req_T_1 = mux(_io_mem_rd_req_T, UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 185:23]
    io.mem_rd_req <= _io_mem_rd_req_T_1 @[Cache.scala 185:17]
    node _io_mem_wr_req_T = eq(cacheState, UInt<1>("h1")) @[Cache.scala 186:35]
    node _io_mem_wr_req_T_1 = mux(_io_mem_wr_req_T, UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 186:23]
    io.mem_wr_req <= _io_mem_wr_req_T_1 @[Cache.scala 186:17]
    node _io_mem_addr_T = eq(io.mem_rd_req, UInt<1>("h1")) @[Cache.scala 189:36]
    node _io_mem_addr_T_1 = mux(io.mem_wr_req, mem_wr_addr, UInt<1>("h0")) @[Cache.scala 189:64]
    node _io_mem_addr_T_2 = mux(_io_mem_addr_T, mem_rd_addr, _io_mem_addr_T_1) @[Cache.scala 189:21]
    io.mem_addr <= _io_mem_addr_T_2 @[Cache.scala 189:15]
    io.outdata <= out @[Cache.scala 192:14]
    io.mem_wr_line <= mem_wr_line @[Cache.scala 193:18]
    node _io_miss_T = or(io.r_req, io.w_req) @[Cache.scala 194:24]
    node _io_miss_T_1 = eq(cacheState, UInt<1>("h0")) @[Cache.scala 194:63]
    node _io_miss_T_2 = and(cache_Hit, _io_miss_T_1) @[Cache.scala 194:50]
    node _io_miss_T_3 = not(_io_miss_T_2) @[Cache.scala 194:38]
    node _io_miss_T_4 = and(_io_miss_T, _io_miss_T_3) @[Cache.scala 194:36]
    io.miss <= _io_miss_T_4 @[Cache.scala 194:11]

  module Cache_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<32>, flip r_req : UInt<1>, flip w_req : UInt<1>, flip writedata : UInt<32>, flip writeMask : UInt<4>, outdata : UInt<32>, miss : UInt<1>, mem_addr : UInt<11>, mem_rd_req : UInt<1>, mem_wr_req : UInt<1>, mem_wr_line : UInt<32>[2], flip mem_rd_line : UInt<32>[2], flip cacheAXI_gnt : UInt<1>}

    wire _CacheMem_WIRE : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_1 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_1[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_1[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_2 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_2[0] <= _CacheMem_WIRE @[Cache.scala 53:69]
    _CacheMem_WIRE_2[1] <= _CacheMem_WIRE_1 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_3 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_3[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_3[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_4 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_4[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_4[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_5 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_5[0] <= _CacheMem_WIRE_3 @[Cache.scala 53:69]
    _CacheMem_WIRE_5[1] <= _CacheMem_WIRE_4 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_6 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_6[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_6[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_7 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_7[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_7[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_8 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_8[0] <= _CacheMem_WIRE_6 @[Cache.scala 53:69]
    _CacheMem_WIRE_8[1] <= _CacheMem_WIRE_7 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_9 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_9[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_9[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_10 : UInt<32>[2] @[Cache.scala 53:105]
    _CacheMem_WIRE_10[0] <= UInt<32>("h0") @[Cache.scala 53:105]
    _CacheMem_WIRE_10[1] <= UInt<32>("h0") @[Cache.scala 53:105]
    wire _CacheMem_WIRE_11 : UInt<32>[2][2] @[Cache.scala 53:69]
    _CacheMem_WIRE_11[0] <= _CacheMem_WIRE_9 @[Cache.scala 53:69]
    _CacheMem_WIRE_11[1] <= _CacheMem_WIRE_10 @[Cache.scala 53:69]
    wire _CacheMem_WIRE_12 : UInt<32>[2][2][4] @[Cache.scala 53:33]
    _CacheMem_WIRE_12[0] <= _CacheMem_WIRE_2 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[1] <= _CacheMem_WIRE_5 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[2] <= _CacheMem_WIRE_8 @[Cache.scala 53:33]
    _CacheMem_WIRE_12[3] <= _CacheMem_WIRE_11 @[Cache.scala 53:33]
    reg CacheMem : UInt<32>[2][2][4], clock with :
      reset => (reset, _CacheMem_WIRE_12) @[Cache.scala 53:25]
    wire _cache_tags_WIRE : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_1 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_1[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_1[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_2 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_2[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_2[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_3 : UInt<9>[2] @[Cache.scala 56:71]
    _cache_tags_WIRE_3[0] <= UInt<9>("h0") @[Cache.scala 56:71]
    _cache_tags_WIRE_3[1] <= UInt<9>("h0") @[Cache.scala 56:71]
    wire _cache_tags_WIRE_4 : UInt<9>[2][4] @[Cache.scala 56:35]
    _cache_tags_WIRE_4[0] <= _cache_tags_WIRE @[Cache.scala 56:35]
    _cache_tags_WIRE_4[1] <= _cache_tags_WIRE_1 @[Cache.scala 56:35]
    _cache_tags_WIRE_4[2] <= _cache_tags_WIRE_2 @[Cache.scala 56:35]
    _cache_tags_WIRE_4[3] <= _cache_tags_WIRE_3 @[Cache.scala 56:35]
    reg cache_tags : UInt<9>[2][4], clock with :
      reset => (reset, _cache_tags_WIRE_4) @[Cache.scala 56:27]
    wire _valid_WIRE : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_1 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_1[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_1[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_2 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_2[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_2[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_3 : UInt<1>[2] @[Cache.scala 57:66]
    _valid_WIRE_3[0] <= UInt<1>("h0") @[Cache.scala 57:66]
    _valid_WIRE_3[1] <= UInt<1>("h0") @[Cache.scala 57:66]
    wire _valid_WIRE_4 : UInt<1>[2][4] @[Cache.scala 57:30]
    _valid_WIRE_4[0] <= _valid_WIRE @[Cache.scala 57:30]
    _valid_WIRE_4[1] <= _valid_WIRE_1 @[Cache.scala 57:30]
    _valid_WIRE_4[2] <= _valid_WIRE_2 @[Cache.scala 57:30]
    _valid_WIRE_4[3] <= _valid_WIRE_3 @[Cache.scala 57:30]
    reg valid : UInt<1>[2][4], clock with :
      reset => (reset, _valid_WIRE_4) @[Cache.scala 57:22]
    wire _dirty_WIRE : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_1 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_1[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_1[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_2 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_2[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_2[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_3 : UInt<1>[2] @[Cache.scala 58:66]
    _dirty_WIRE_3[0] <= UInt<1>("h0") @[Cache.scala 58:66]
    _dirty_WIRE_3[1] <= UInt<1>("h0") @[Cache.scala 58:66]
    wire _dirty_WIRE_4 : UInt<1>[2][4] @[Cache.scala 58:30]
    _dirty_WIRE_4[0] <= _dirty_WIRE @[Cache.scala 58:30]
    _dirty_WIRE_4[1] <= _dirty_WIRE_1 @[Cache.scala 58:30]
    _dirty_WIRE_4[2] <= _dirty_WIRE_2 @[Cache.scala 58:30]
    _dirty_WIRE_4[3] <= _dirty_WIRE_3 @[Cache.scala 58:30]
    reg dirty : UInt<1>[2][4], clock with :
      reset => (reset, _dirty_WIRE_4) @[Cache.scala 58:22]
    node word_addr = bits(io.addr, 1, 0) @[Cache.scala 63:26]
    node line_addr = bits(io.addr, 2, 2) @[Cache.scala 64:26]
    node set_addr = bits(io.addr, 4, 3) @[Cache.scala 65:25]
    node tag_addr = bits(io.addr, 13, 5) @[Cache.scala 66:25]
    node unused_addr = bits(io.addr, 31, 14) @[Cache.scala 67:28]
    reg mem_rd_set_addr : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Cache.scala 70:32]
    reg mem_rd_tag_addr : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[Cache.scala 71:32]
    node mem_rd_addr = cat(mem_rd_tag_addr, mem_rd_set_addr) @[Cat.scala 31:58]
    reg mem_wr_addr : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[Cache.scala 73:28]
    wire cache_Hit : UInt<1>
    cache_Hit <= UInt<1>("h0")
    wire way_hit : UInt
    way_hit <= UInt<1>("h0")
    node _T = or(io.w_req, io.r_req) @[Cache.scala 84:17]
    when _T : @[Cache.scala 84:28]
      cache_Hit <= UInt<1>("h0") @[Cache.scala 85:19]
      way_hit <= UInt<1>("h0") @[Cache.scala 86:17]
      node _T_1 = eq(valid[set_addr][UInt<1>("h0")], UInt<1>("h1")) @[Cache.scala 88:32]
      node _T_2 = eq(cache_tags[set_addr][UInt<1>("h0")], tag_addr) @[Cache.scala 88:70]
      node _T_3 = and(_T_1, _T_2) @[Cache.scala 88:42]
      when _T_3 : @[Cache.scala 88:82]
        cache_Hit <= UInt<1>("h1") @[Cache.scala 89:19]
        way_hit <= UInt<1>("h0") @[Cache.scala 90:17]
      node _T_4 = eq(valid[set_addr][UInt<1>("h1")], UInt<1>("h1")) @[Cache.scala 88:32]
      node _T_5 = eq(cache_tags[set_addr][UInt<1>("h1")], tag_addr) @[Cache.scala 88:70]
      node _T_6 = and(_T_4, _T_5) @[Cache.scala 88:42]
      when _T_6 : @[Cache.scala 88:82]
        cache_Hit <= UInt<1>("h1") @[Cache.scala 89:19]
        way_hit <= UInt<1>("h1") @[Cache.scala 90:17]
    reg cacheState : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[Cache.scala 96:27]
    wire wayout_choice : UInt<1>
    wayout_choice <= UInt<1>("h0")
    wire _FIFO_Choice_WIRE : UInt<32>[4] @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[0] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[1] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[2] <= UInt<32>("h0") @[Cache.scala 103:38]
    _FIFO_Choice_WIRE[3] <= UInt<32>("h0") @[Cache.scala 103:38]
    reg FIFO_Choice : UInt<32>[4], clock with :
      reset => (reset, _FIFO_Choice_WIRE) @[Cache.scala 103:30]
    node _T_7 = asUInt(UInt<2>("h3")) @[Cache.scala 104:23]
    node _T_8 = asUInt(cacheState) @[Cache.scala 104:23]
    node _T_9 = eq(_T_7, _T_8) @[Cache.scala 104:23]
    when _T_9 : @[Cache.scala 104:23]
      node _FIFO_Choice_T = add(FIFO_Choice[set_addr], UInt<1>("h1")) @[Cache.scala 106:57]
      node _FIFO_Choice_T_1 = tail(_FIFO_Choice_T, 1) @[Cache.scala 106:57]
      node _FIFO_Choice_T_2 = rem(_FIFO_Choice_T_1, UInt<2>("h2")) @[Cache.scala 106:63]
      FIFO_Choice[set_addr] <= _FIFO_Choice_T_2 @[Cache.scala 106:31]
    wayout_choice <= FIFO_Choice[set_addr] @[Cache.scala 109:19]
    wire out : UInt<32>
    out <= UInt<32>("h0")
    wire _mem_wr_line_WIRE : UInt<32>[2] @[Cache.scala 122:36]
    _mem_wr_line_WIRE[0] <= UInt<32>("h0") @[Cache.scala 122:36]
    _mem_wr_line_WIRE[1] <= UInt<32>("h0") @[Cache.scala 122:36]
    reg mem_wr_line : UInt<32>[2], clock with :
      reset => (reset, _mem_wr_line_WIRE) @[Cache.scala 122:28]
    node _T_10 = asUInt(UInt<1>("h0")) @[Cache.scala 124:21]
    node _T_11 = asUInt(cacheState) @[Cache.scala 124:21]
    node _T_12 = eq(_T_10, _T_11) @[Cache.scala 124:21]
    when _T_12 : @[Cache.scala 124:21]
      when cache_Hit : @[Cache.scala 126:22]
        node _T_13 = eq(io.r_req, UInt<1>("h1")) @[Cache.scala 127:23]
        when _T_13 : @[Cache.scala 127:34]
          node _out_T = or(way_hit, UInt<1>("h0"))
          node _out_T_1 = bits(_out_T, 0, 0)
          out <= CacheMem[set_addr][_out_T_1][line_addr] @[Cache.scala 129:15]
        else :
          node _T_14 = eq(io.w_req, UInt<1>("h1")) @[Cache.scala 130:29]
          when _T_14 : @[Cache.scala 130:40]
            node _T_15 = eq(UInt<1>("h1"), io.writeMask) @[Cache.scala 131:31]
            when _T_15 : @[Cache.scala 131:31]
              node _T_16 = or(way_hit, UInt<1>("h0"))
              node _T_17 = bits(_T_16, 0, 0)
              node _CacheMem_T = bits(io.writedata, 7, 0) @[Cache.scala 133:83]
              node _CacheMem_T_1 = cat(UInt<24>("h0"), _CacheMem_T) @[Cat.scala 31:58]
              CacheMem[set_addr][_T_17][line_addr] <= _CacheMem_T_1 @[Cache.scala 133:54]
            else :
              node _T_18 = eq(UInt<2>("h3"), io.writeMask) @[Cache.scala 131:31]
              when _T_18 : @[Cache.scala 131:31]
                node _T_19 = or(way_hit, UInt<1>("h0"))
                node _T_20 = bits(_T_19, 0, 0)
                node _CacheMem_T_2 = bits(io.writedata, 15, 0) @[Cache.scala 136:83]
                node _CacheMem_T_3 = cat(UInt<16>("h0"), _CacheMem_T_2) @[Cat.scala 31:58]
                CacheMem[set_addr][_T_20][line_addr] <= _CacheMem_T_3 @[Cache.scala 136:54]
              else :
                node _T_21 = eq(UInt<4>("hf"), io.writeMask) @[Cache.scala 131:31]
                when _T_21 : @[Cache.scala 131:31]
                  node _T_22 = or(way_hit, UInt<1>("h0"))
                  node _T_23 = bits(_T_22, 0, 0)
                  CacheMem[set_addr][_T_23][line_addr] <= io.writedata @[Cache.scala 139:54]
            node _T_24 = or(way_hit, UInt<1>("h0"))
            node _T_25 = bits(_T_24, 0, 0)
            dirty[set_addr][_T_25] <= UInt<1>("h1") @[Cache.scala 142:36]
          else :
            cacheState <= UInt<1>("h0") @[Cache.scala 144:22]
      else :
        node _T_26 = or(io.w_req, io.r_req) @[Cache.scala 147:23]
        when _T_26 : @[Cache.scala 147:34]
          node _T_27 = eq(valid[set_addr][wayout_choice], UInt<1>("h1")) @[Cache.scala 148:47]
          node _T_28 = eq(dirty[set_addr][wayout_choice], UInt<1>("h1")) @[Cache.scala 148:92]
          node _T_29 = and(_T_27, _T_28) @[Cache.scala 148:58]
          when _T_29 : @[Cache.scala 148:103]
            cacheState <= UInt<1>("h1") @[Cache.scala 149:24]
            node _mem_wr_addr_T = cat(cache_tags[set_addr][wayout_choice], set_addr) @[Cat.scala 31:58]
            mem_wr_addr <= _mem_wr_addr_T @[Cache.scala 150:25]
            mem_wr_line <= CacheMem[set_addr][wayout_choice] @[Cache.scala 151:25]
          else :
            cacheState <= UInt<2>("h2") @[Cache.scala 153:24]
          mem_rd_tag_addr <= tag_addr @[Cache.scala 155:27]
          mem_rd_set_addr <= set_addr @[Cache.scala 156:27]
    else :
      node _T_30 = asUInt(UInt<1>("h1")) @[Cache.scala 124:21]
      node _T_31 = asUInt(cacheState) @[Cache.scala 124:21]
      node _T_32 = eq(_T_30, _T_31) @[Cache.scala 124:21]
      when _T_32 : @[Cache.scala 124:21]
        node _T_33 = eq(io.cacheAXI_gnt, UInt<1>("h1")) @[Cache.scala 161:28]
        when _T_33 : @[Cache.scala 161:39]
          cacheState <= UInt<2>("h2") @[Cache.scala 162:20]
      else :
        node _T_34 = asUInt(UInt<2>("h2")) @[Cache.scala 124:21]
        node _T_35 = asUInt(cacheState) @[Cache.scala 124:21]
        node _T_36 = eq(_T_34, _T_35) @[Cache.scala 124:21]
        when _T_36 : @[Cache.scala 124:21]
          node _T_37 = eq(io.cacheAXI_gnt, UInt<1>("h1")) @[Cache.scala 166:28]
          when _T_37 : @[Cache.scala 166:39]
            cacheState <= UInt<2>("h3") @[Cache.scala 167:20]
        else :
          node _T_38 = asUInt(UInt<2>("h3")) @[Cache.scala 124:21]
          node _T_39 = asUInt(cacheState) @[Cache.scala 124:21]
          node _T_40 = eq(_T_38, _T_39) @[Cache.scala 124:21]
          when _T_40 : @[Cache.scala 124:21]
            cacheState <= UInt<1>("h0") @[Cache.scala 171:18]
            cache_tags[mem_rd_set_addr][wayout_choice] <= mem_rd_tag_addr @[Cache.scala 172:50]
            valid[mem_rd_set_addr][wayout_choice] <= UInt<1>("h1") @[Cache.scala 173:45]
            dirty[mem_rd_set_addr][wayout_choice] <= UInt<1>("h0") @[Cache.scala 174:45]
            CacheMem[mem_rd_set_addr][wayout_choice][UInt<1>("h0")] <= io.mem_rd_line[UInt<1>("h0")] @[Cache.scala 176:55]
            CacheMem[mem_rd_set_addr][wayout_choice][UInt<1>("h1")] <= io.mem_rd_line[UInt<1>("h1")] @[Cache.scala 176:55]
    node _io_mem_rd_req_T = eq(cacheState, UInt<2>("h2")) @[Cache.scala 185:35]
    node _io_mem_rd_req_T_1 = mux(_io_mem_rd_req_T, UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 185:23]
    io.mem_rd_req <= _io_mem_rd_req_T_1 @[Cache.scala 185:17]
    node _io_mem_wr_req_T = eq(cacheState, UInt<1>("h1")) @[Cache.scala 186:35]
    node _io_mem_wr_req_T_1 = mux(_io_mem_wr_req_T, UInt<1>("h1"), UInt<1>("h0")) @[Cache.scala 186:23]
    io.mem_wr_req <= _io_mem_wr_req_T_1 @[Cache.scala 186:17]
    node _io_mem_addr_T = eq(io.mem_rd_req, UInt<1>("h1")) @[Cache.scala 189:36]
    node _io_mem_addr_T_1 = mux(io.mem_wr_req, mem_wr_addr, UInt<1>("h0")) @[Cache.scala 189:64]
    node _io_mem_addr_T_2 = mux(_io_mem_addr_T, mem_rd_addr, _io_mem_addr_T_1) @[Cache.scala 189:21]
    io.mem_addr <= _io_mem_addr_T_2 @[Cache.scala 189:15]
    io.outdata <= out @[Cache.scala 192:14]
    io.mem_wr_line <= mem_wr_line @[Cache.scala 193:18]
    node _io_miss_T = or(io.r_req, io.w_req) @[Cache.scala 194:24]
    node _io_miss_T_1 = eq(cacheState, UInt<1>("h0")) @[Cache.scala 194:63]
    node _io_miss_T_2 = and(cache_Hit, _io_miss_T_1) @[Cache.scala 194:50]
    node _io_miss_T_3 = not(_io_miss_T_2) @[Cache.scala 194:38]
    node _io_miss_T_4 = and(_io_miss_T, _io_miss_T_3) @[Cache.scala 194:36]
    io.miss <= _io_miss_T_4 @[Cache.scala 194:11]

  module CacheAXI :
    input clock : Clock
    input reset : Reset
    output io : { flip mem_addr : UInt<11>, flip mem_rd_req : UInt<1>, flip mem_wr_req : UInt<1>, flip mem_wr_line : UInt<32>[2], mem_rd_line : UInt<32>[2], cacheAXI_gnt : UInt<1>, TVALID : UInt<1>, TLAST : UInt<1>, flip TREADY : UInt<1>, flip TDATAR : UInt<32>, TDATAW : UInt<32>, TUSER : UInt<2>}

    reg transferCounter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CacheAXI.scala 45:32]
    reg cacheAXIState : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheAXI.scala 47:30]
    wire TLAST : UInt<1>
    TLAST <= UInt<1>("h0")
    wire TVALID : UInt<1>
    TVALID <= UInt<1>("h0")
    wire TUSER : UInt<2>
    TUSER <= UInt<1>("h0")
    wire TDATAW : UInt<32>
    TDATAW <= UInt<32>("h0")
    wire _rdLine_WIRE : UInt<32>[2] @[CacheAXI.scala 55:31]
    _rdLine_WIRE[0] <= UInt<32>("h0") @[CacheAXI.scala 55:31]
    _rdLine_WIRE[1] <= UInt<32>("h0") @[CacheAXI.scala 55:31]
    reg rdLine : UInt<32>[2], clock with :
      reset => (reset, _rdLine_WIRE) @[CacheAXI.scala 55:23]
    node _T = asUInt(UInt<1>("h0")) @[CacheAXI.scala 57:24]
    node _T_1 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
    node _T_2 = eq(_T, _T_1) @[CacheAXI.scala 57:24]
    when _T_2 : @[CacheAXI.scala 57:24]
      TVALID <= UInt<1>("h0") @[CacheAXI.scala 59:14]
      TLAST <= UInt<1>("h0") @[CacheAXI.scala 60:13]
      transferCounter <= UInt<1>("h0") @[CacheAXI.scala 61:23]
      TUSER <= UInt<1>("h0") @[CacheAXI.scala 62:13]
      node _T_3 = eq(io.mem_rd_req, UInt<1>("h1")) @[CacheAXI.scala 63:26]
      when _T_3 : @[CacheAXI.scala 63:37]
        node _T_4 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 64:24]
        when _T_4 : @[CacheAXI.scala 64:35]
          cacheAXIState <= UInt<1>("h1") @[CacheAXI.scala 65:25]
      node _T_5 = eq(io.mem_wr_req, UInt<1>("h1")) @[CacheAXI.scala 68:26]
      when _T_5 : @[CacheAXI.scala 68:37]
        node _T_6 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 69:24]
        when _T_6 : @[CacheAXI.scala 69:35]
          cacheAXIState <= UInt<2>("h2") @[CacheAXI.scala 70:25]
    else :
      node _T_7 = asUInt(UInt<1>("h1")) @[CacheAXI.scala 57:24]
      node _T_8 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
      node _T_9 = eq(_T_7, _T_8) @[CacheAXI.scala 57:24]
      when _T_9 : @[CacheAXI.scala 57:24]
        TUSER <= UInt<1>("h1") @[CacheAXI.scala 76:13]
        node _T_10 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 77:22]
        when _T_10 : @[CacheAXI.scala 77:33]
          node _T_11 = leq(transferCounter, UInt<2>("h2")) @[CacheAXI.scala 78:30]
          when _T_11 : @[CacheAXI.scala 78:55]
            TVALID <= UInt<1>("h1") @[CacheAXI.scala 79:18]
            node _T_12 = eq(transferCounter, UInt<1>("h0")) @[CacheAXI.scala 80:32]
            when _T_12 : @[CacheAXI.scala 80:40]
              node TDATAW_hi = cat(UInt<18>("h0"), io.mem_addr) @[Cat.scala 31:58]
              node _TDATAW_T = cat(TDATAW_hi, UInt<3>("h0")) @[Cat.scala 31:58]
              TDATAW <= _TDATAW_T @[CacheAXI.scala 81:20]
            else :
              node _T_13 = sub(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 83:35]
              node _T_14 = tail(_T_13, 1) @[CacheAXI.scala 83:35]
              node _T_15 = bits(_T_14, 0, 0)
              rdLine[_T_15] <= io.TDATAR @[CacheAXI.scala 83:41]
            node _transferCounter_T = add(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 85:46]
            node _transferCounter_T_1 = tail(_transferCounter_T, 1) @[CacheAXI.scala 85:46]
            transferCounter <= _transferCounter_T_1 @[CacheAXI.scala 85:27]
          else :
            TVALID <= UInt<1>("h0") @[CacheAXI.scala 87:18]
            TLAST <= UInt<1>("h1") @[CacheAXI.scala 88:17]
            cacheAXIState <= UInt<2>("h3") @[CacheAXI.scala 89:25]
      else :
        node _T_16 = asUInt(UInt<2>("h2")) @[CacheAXI.scala 57:24]
        node _T_17 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
        node _T_18 = eq(_T_16, _T_17) @[CacheAXI.scala 57:24]
        when _T_18 : @[CacheAXI.scala 57:24]
          TUSER <= UInt<2>("h2") @[CacheAXI.scala 96:13]
          node _T_19 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 97:22]
          when _T_19 : @[CacheAXI.scala 97:33]
            node _T_20 = leq(transferCounter, UInt<2>("h2")) @[CacheAXI.scala 98:30]
            when _T_20 : @[CacheAXI.scala 98:54]
              TVALID <= UInt<1>("h1") @[CacheAXI.scala 99:18]
              node _T_21 = eq(transferCounter, UInt<1>("h0")) @[CacheAXI.scala 100:32]
              when _T_21 : @[CacheAXI.scala 100:40]
                node TDATAW_hi_1 = cat(UInt<18>("h0"), io.mem_addr) @[Cat.scala 31:58]
                node _TDATAW_T_1 = cat(TDATAW_hi_1, UInt<3>("h0")) @[Cat.scala 31:58]
                TDATAW <= _TDATAW_T_1 @[CacheAXI.scala 101:20]
              else :
                node _TDATAW_T_2 = sub(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 103:53]
                node _TDATAW_T_3 = tail(_TDATAW_T_2, 1) @[CacheAXI.scala 103:53]
                node _TDATAW_T_4 = bits(_TDATAW_T_3, 0, 0)
                TDATAW <= io.mem_wr_line[_TDATAW_T_4] @[CacheAXI.scala 103:20]
              node _transferCounter_T_2 = add(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 105:46]
              node _transferCounter_T_3 = tail(_transferCounter_T_2, 1) @[CacheAXI.scala 105:46]
              transferCounter <= _transferCounter_T_3 @[CacheAXI.scala 105:27]
            else :
              TVALID <= UInt<1>("h0") @[CacheAXI.scala 107:18]
              TLAST <= UInt<1>("h1") @[CacheAXI.scala 108:17]
              cacheAXIState <= UInt<2>("h3") @[CacheAXI.scala 109:25]
        else :
          node _T_22 = asUInt(UInt<2>("h3")) @[CacheAXI.scala 57:24]
          node _T_23 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
          node _T_24 = eq(_T_22, _T_23) @[CacheAXI.scala 57:24]
          when _T_24 : @[CacheAXI.scala 57:24]
            TUSER <= UInt<1>("h0") @[CacheAXI.scala 115:13]
            cacheAXIState <= UInt<1>("h0") @[CacheAXI.scala 116:21]
    io.TUSER <= TUSER @[CacheAXI.scala 120:12]
    io.TVALID <= TVALID @[CacheAXI.scala 121:13]
    io.TLAST <= TLAST @[CacheAXI.scala 122:12]
    io.TDATAW <= TDATAW @[CacheAXI.scala 123:13]
    io.mem_rd_line <= rdLine @[CacheAXI.scala 124:18]
    node _io_cacheAXI_gnt_T = eq(cacheAXIState, UInt<2>("h3")) @[CacheAXI.scala 125:40]
    node _io_cacheAXI_gnt_T_1 = mux(_io_cacheAXI_gnt_T, UInt<1>("h1"), UInt<1>("h0")) @[CacheAXI.scala 125:25]
    io.cacheAXI_gnt <= _io_cacheAXI_gnt_T_1 @[CacheAXI.scala 125:19]

  module CacheAXI_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip mem_addr : UInt<11>, flip mem_rd_req : UInt<1>, flip mem_wr_req : UInt<1>, flip mem_wr_line : UInt<32>[2], mem_rd_line : UInt<32>[2], cacheAXI_gnt : UInt<1>, TVALID : UInt<1>, TLAST : UInt<1>, flip TREADY : UInt<1>, flip TDATAR : UInt<32>, TDATAW : UInt<32>, TUSER : UInt<2>}

    reg transferCounter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[CacheAXI.scala 45:32]
    reg cacheAXIState : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[CacheAXI.scala 47:30]
    wire TLAST : UInt<1>
    TLAST <= UInt<1>("h0")
    wire TVALID : UInt<1>
    TVALID <= UInt<1>("h0")
    wire TUSER : UInt<2>
    TUSER <= UInt<1>("h0")
    wire TDATAW : UInt<32>
    TDATAW <= UInt<32>("h0")
    wire _rdLine_WIRE : UInt<32>[2] @[CacheAXI.scala 55:31]
    _rdLine_WIRE[0] <= UInt<32>("h0") @[CacheAXI.scala 55:31]
    _rdLine_WIRE[1] <= UInt<32>("h0") @[CacheAXI.scala 55:31]
    reg rdLine : UInt<32>[2], clock with :
      reset => (reset, _rdLine_WIRE) @[CacheAXI.scala 55:23]
    node _T = asUInt(UInt<1>("h0")) @[CacheAXI.scala 57:24]
    node _T_1 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
    node _T_2 = eq(_T, _T_1) @[CacheAXI.scala 57:24]
    when _T_2 : @[CacheAXI.scala 57:24]
      TVALID <= UInt<1>("h0") @[CacheAXI.scala 59:14]
      TLAST <= UInt<1>("h0") @[CacheAXI.scala 60:13]
      transferCounter <= UInt<1>("h0") @[CacheAXI.scala 61:23]
      TUSER <= UInt<1>("h0") @[CacheAXI.scala 62:13]
      node _T_3 = eq(io.mem_rd_req, UInt<1>("h1")) @[CacheAXI.scala 63:26]
      when _T_3 : @[CacheAXI.scala 63:37]
        node _T_4 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 64:24]
        when _T_4 : @[CacheAXI.scala 64:35]
          cacheAXIState <= UInt<1>("h1") @[CacheAXI.scala 65:25]
      node _T_5 = eq(io.mem_wr_req, UInt<1>("h1")) @[CacheAXI.scala 68:26]
      when _T_5 : @[CacheAXI.scala 68:37]
        node _T_6 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 69:24]
        when _T_6 : @[CacheAXI.scala 69:35]
          cacheAXIState <= UInt<2>("h2") @[CacheAXI.scala 70:25]
    else :
      node _T_7 = asUInt(UInt<1>("h1")) @[CacheAXI.scala 57:24]
      node _T_8 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
      node _T_9 = eq(_T_7, _T_8) @[CacheAXI.scala 57:24]
      when _T_9 : @[CacheAXI.scala 57:24]
        TUSER <= UInt<1>("h1") @[CacheAXI.scala 76:13]
        node _T_10 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 77:22]
        when _T_10 : @[CacheAXI.scala 77:33]
          node _T_11 = leq(transferCounter, UInt<2>("h2")) @[CacheAXI.scala 78:30]
          when _T_11 : @[CacheAXI.scala 78:55]
            TVALID <= UInt<1>("h1") @[CacheAXI.scala 79:18]
            node _T_12 = eq(transferCounter, UInt<1>("h0")) @[CacheAXI.scala 80:32]
            when _T_12 : @[CacheAXI.scala 80:40]
              node TDATAW_hi = cat(UInt<18>("h0"), io.mem_addr) @[Cat.scala 31:58]
              node _TDATAW_T = cat(TDATAW_hi, UInt<3>("h0")) @[Cat.scala 31:58]
              TDATAW <= _TDATAW_T @[CacheAXI.scala 81:20]
            else :
              node _T_13 = sub(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 83:35]
              node _T_14 = tail(_T_13, 1) @[CacheAXI.scala 83:35]
              node _T_15 = bits(_T_14, 0, 0)
              rdLine[_T_15] <= io.TDATAR @[CacheAXI.scala 83:41]
            node _transferCounter_T = add(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 85:46]
            node _transferCounter_T_1 = tail(_transferCounter_T, 1) @[CacheAXI.scala 85:46]
            transferCounter <= _transferCounter_T_1 @[CacheAXI.scala 85:27]
          else :
            TVALID <= UInt<1>("h0") @[CacheAXI.scala 87:18]
            TLAST <= UInt<1>("h1") @[CacheAXI.scala 88:17]
            cacheAXIState <= UInt<2>("h3") @[CacheAXI.scala 89:25]
      else :
        node _T_16 = asUInt(UInt<2>("h2")) @[CacheAXI.scala 57:24]
        node _T_17 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
        node _T_18 = eq(_T_16, _T_17) @[CacheAXI.scala 57:24]
        when _T_18 : @[CacheAXI.scala 57:24]
          TUSER <= UInt<2>("h2") @[CacheAXI.scala 96:13]
          node _T_19 = eq(io.TREADY, UInt<1>("h1")) @[CacheAXI.scala 97:22]
          when _T_19 : @[CacheAXI.scala 97:33]
            node _T_20 = leq(transferCounter, UInt<2>("h2")) @[CacheAXI.scala 98:30]
            when _T_20 : @[CacheAXI.scala 98:54]
              TVALID <= UInt<1>("h1") @[CacheAXI.scala 99:18]
              node _T_21 = eq(transferCounter, UInt<1>("h0")) @[CacheAXI.scala 100:32]
              when _T_21 : @[CacheAXI.scala 100:40]
                node TDATAW_hi_1 = cat(UInt<18>("h0"), io.mem_addr) @[Cat.scala 31:58]
                node _TDATAW_T_1 = cat(TDATAW_hi_1, UInt<3>("h0")) @[Cat.scala 31:58]
                TDATAW <= _TDATAW_T_1 @[CacheAXI.scala 101:20]
              else :
                node _TDATAW_T_2 = sub(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 103:53]
                node _TDATAW_T_3 = tail(_TDATAW_T_2, 1) @[CacheAXI.scala 103:53]
                node _TDATAW_T_4 = bits(_TDATAW_T_3, 0, 0)
                TDATAW <= io.mem_wr_line[_TDATAW_T_4] @[CacheAXI.scala 103:20]
              node _transferCounter_T_2 = add(transferCounter, UInt<1>("h1")) @[CacheAXI.scala 105:46]
              node _transferCounter_T_3 = tail(_transferCounter_T_2, 1) @[CacheAXI.scala 105:46]
              transferCounter <= _transferCounter_T_3 @[CacheAXI.scala 105:27]
            else :
              TVALID <= UInt<1>("h0") @[CacheAXI.scala 107:18]
              TLAST <= UInt<1>("h1") @[CacheAXI.scala 108:17]
              cacheAXIState <= UInt<2>("h3") @[CacheAXI.scala 109:25]
        else :
          node _T_22 = asUInt(UInt<2>("h3")) @[CacheAXI.scala 57:24]
          node _T_23 = asUInt(cacheAXIState) @[CacheAXI.scala 57:24]
          node _T_24 = eq(_T_22, _T_23) @[CacheAXI.scala 57:24]
          when _T_24 : @[CacheAXI.scala 57:24]
            TUSER <= UInt<1>("h0") @[CacheAXI.scala 115:13]
            cacheAXIState <= UInt<1>("h0") @[CacheAXI.scala 116:21]
    io.TUSER <= TUSER @[CacheAXI.scala 120:12]
    io.TVALID <= TVALID @[CacheAXI.scala 121:13]
    io.TLAST <= TLAST @[CacheAXI.scala 122:12]
    io.TDATAW <= TDATAW @[CacheAXI.scala 123:13]
    io.mem_rd_line <= rdLine @[CacheAXI.scala 124:18]
    node _io_cacheAXI_gnt_T = eq(cacheAXIState, UInt<2>("h3")) @[CacheAXI.scala 125:40]
    node _io_cacheAXI_gnt_T_1 = mux(_io_cacheAXI_gnt_T, UInt<1>("h1"), UInt<1>("h0")) @[CacheAXI.scala 125:25]
    io.cacheAXI_gnt <= _io_cacheAXI_gnt_T_1 @[CacheAXI.scala 125:19]

  module SinglePortRAM :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<10>, flip dataIn : UInt<32>, flip en : UInt<1>, flip we : UInt<1>, dataOut : UInt<32>}

    smem syncRAM : UInt<32> [8192] @[Memory.scala 23:28]
    when io.en : @[Memory.scala 24:15]
      when io.we : @[Memory.scala 25:17]
        write mport MPORT = syncRAM[io.addr], clock
        MPORT <= io.dataIn
        io.dataOut is invalid @[Memory.scala 27:18]
      else :
        wire _io_dataOut_WIRE : UInt @[Memory.scala 29:33]
        _io_dataOut_WIRE is invalid @[Memory.scala 29:33]
        when UInt<1>("h1") : @[Memory.scala 29:33]
          _io_dataOut_WIRE <= io.addr @[Memory.scala 29:33]
          node _io_dataOut_T = or(_io_dataOut_WIRE, UInt<13>("h0")) @[Memory.scala 29:33]
          node _io_dataOut_T_1 = bits(_io_dataOut_T, 12, 0) @[Memory.scala 29:33]
          read mport io_dataOut_MPORT = syncRAM[_io_dataOut_T_1], clock @[Memory.scala 29:33]
        io.dataOut <= io_dataOut_MPORT @[Memory.scala 29:18]
    else :
      io.dataOut is invalid @[Memory.scala 32:16]

  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { flip TVALID : UInt<1>, TREADY : UInt<1>, flip TDATAW : UInt<32>, TDATAR : UInt<32>, flip TLAST : UInt<1>, flip TUSER : UInt<2>}

    inst syncMem of SinglePortRAM @[Memory.scala 61:23]
    syncMem.clock <= clock
    syncMem.reset <= reset
    syncMem.io.en <= UInt<1>("h1") @[Memory.scala 62:17]
    wire TDATAR : UInt<32>
    TDATAR <= UInt<32>("h0")
    reg memState : UInt<2>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory.scala 67:25]
    wire _dataBuffer_WIRE : UInt<32>[3] @[Memory.scala 68:35]
    _dataBuffer_WIRE[0] <= UInt<32>("h0") @[Memory.scala 68:35]
    _dataBuffer_WIRE[1] <= UInt<32>("h0") @[Memory.scala 68:35]
    _dataBuffer_WIRE[2] <= UInt<32>("h0") @[Memory.scala 68:35]
    reg dataBuffer : UInt<32>[3], clock with :
      reset => (reset, _dataBuffer_WIRE) @[Memory.scala 68:27]
    wire _bufferValid_WIRE : UInt<1>[3] @[Memory.scala 69:36]
    _bufferValid_WIRE[0] <= UInt<1>("h0") @[Memory.scala 69:36]
    _bufferValid_WIRE[1] <= UInt<1>("h0") @[Memory.scala 69:36]
    _bufferValid_WIRE[2] <= UInt<1>("h0") @[Memory.scala 69:36]
    reg bufferValid : UInt<1>[3], clock with :
      reset => (reset, _bufferValid_WIRE) @[Memory.scala 69:28]
    reg transferCounter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory.scala 71:32]
    reg rwmemAddr : UInt<30>, clock with :
      reset => (reset, UInt<30>("h0")) @[Memory.scala 72:26]
    syncMem.io.dataIn <= UInt<1>("h0") @[Memory.scala 75:21]
    syncMem.io.we <= UInt<1>("h0") @[Memory.scala 76:17]
    syncMem.io.addr <= UInt<1>("h0") @[Memory.scala 77:19]
    node _T = asUInt(UInt<1>("h0")) @[Memory.scala 78:19]
    node _T_1 = asUInt(memState) @[Memory.scala 78:19]
    node _T_2 = eq(_T, _T_1) @[Memory.scala 78:19]
    when _T_2 : @[Memory.scala 78:19]
      syncMem.io.dataIn <= UInt<1>("h0") @[Memory.scala 81:25]
      syncMem.io.we <= UInt<1>("h0") @[Memory.scala 82:21]
      syncMem.io.addr <= UInt<1>("h0") @[Memory.scala 83:23]
      transferCounter <= UInt<1>("h0") @[Memory.scala 85:23]
      node _T_3 = eq(io.TVALID, UInt<1>("h1")) @[Memory.scala 86:22]
      when _T_3 : @[Memory.scala 86:33]
        node _rwmemAddr_T = shr(io.TDATAW, 2) @[Memory.scala 87:32]
        rwmemAddr <= _rwmemAddr_T @[Memory.scala 87:19]
        node _T_4 = eq(io.TUSER, UInt<1>("h1")) @[Memory.scala 88:23]
        when _T_4 : @[Memory.scala 88:47]
          memState <= UInt<1>("h1") @[Memory.scala 89:20]
        else :
          node _T_5 = eq(io.TUSER, UInt<2>("h2")) @[Memory.scala 90:29]
          when _T_5 : @[Memory.scala 90:54]
            memState <= UInt<2>("h2") @[Memory.scala 91:20]
    else :
      node _T_6 = asUInt(UInt<1>("h1")) @[Memory.scala 78:19]
      node _T_7 = asUInt(memState) @[Memory.scala 78:19]
      node _T_8 = eq(_T_6, _T_7) @[Memory.scala 78:19]
      when _T_8 : @[Memory.scala 78:19]
        node _T_9 = eq(io.TLAST, UInt<1>("h0")) @[Memory.scala 97:21]
        when _T_9 : @[Memory.scala 97:34]
          syncMem.io.addr <= rwmemAddr @[Memory.scala 99:27]
          TDATAR <= syncMem.io.dataOut @[Memory.scala 100:18]
          node _rwmemAddr_T_1 = add(rwmemAddr, UInt<1>("h1")) @[Memory.scala 102:32]
          node _rwmemAddr_T_2 = tail(_rwmemAddr_T_1, 1) @[Memory.scala 102:32]
          rwmemAddr <= _rwmemAddr_T_2 @[Memory.scala 102:19]
          node _transferCounter_T = add(transferCounter, UInt<1>("h1")) @[Memory.scala 103:44]
          node _transferCounter_T_1 = tail(_transferCounter_T, 1) @[Memory.scala 103:44]
          transferCounter <= _transferCounter_T_1 @[Memory.scala 103:25]
        else :
          memState <= UInt<1>("h0") @[Memory.scala 105:18]
      else :
        node _T_10 = asUInt(UInt<2>("h2")) @[Memory.scala 78:19]
        node _T_11 = asUInt(memState) @[Memory.scala 78:19]
        node _T_12 = eq(_T_10, _T_11) @[Memory.scala 78:19]
        when _T_12 : @[Memory.scala 78:19]
          node _T_13 = eq(io.TLAST, UInt<1>("h0")) @[Memory.scala 110:21]
          when _T_13 : @[Memory.scala 110:34]
            syncMem.io.addr <= rwmemAddr @[Memory.scala 113:27]
            syncMem.io.dataIn <= io.TDATAW @[Memory.scala 114:29]
            syncMem.io.we <= UInt<1>("h1") @[Memory.scala 115:25]
            node _rwmemAddr_T_3 = add(rwmemAddr, UInt<1>("h1")) @[Memory.scala 117:32]
            node _rwmemAddr_T_4 = tail(_rwmemAddr_T_3, 1) @[Memory.scala 117:32]
            rwmemAddr <= _rwmemAddr_T_4 @[Memory.scala 117:19]
            node _transferCounter_T_2 = add(transferCounter, UInt<1>("h1")) @[Memory.scala 118:44]
            node _transferCounter_T_3 = tail(_transferCounter_T_2, 1) @[Memory.scala 118:44]
            transferCounter <= _transferCounter_T_3 @[Memory.scala 118:25]
          else :
            memState <= UInt<1>("h0") @[Memory.scala 120:18]
    io.TREADY <= UInt<1>("h1") @[Memory.scala 129:13]
    io.TDATAR <= TDATAR @[Memory.scala 130:13]

  module RPSWithOutCore :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip instr_addr : UInt<32>, instr_data : UInt<32>, IMiss : UInt<1>, DMiss : UInt<1>, flip data_be : UInt<4>, flip data_we : UInt<1>, flip data_addr : UInt<32>, flip data_wdata : UInt<32>, data_rdata : UInt<32>, flip IRreq : UInt<1>, flip DRreq : UInt<1>}

    inst Icache of Cache @[RPSWithOutCore.scala 47:22]
    Icache.clock <= clock
    Icache.reset <= reset
    inst Dcache of Cache_1 @[RPSWithOutCore.scala 48:22]
    Dcache.clock <= clock
    Dcache.reset <= reset
    inst IcacheAXI of CacheAXI @[RPSWithOutCore.scala 49:25]
    IcacheAXI.clock <= clock
    IcacheAXI.reset <= reset
    inst DcacheAXI of CacheAXI_1 @[RPSWithOutCore.scala 50:25]
    DcacheAXI.clock <= clock
    DcacheAXI.reset <= reset
    inst mem of Memory @[RPSWithOutCore.scala 51:19]
    mem.clock <= clock
    mem.reset <= reset
    io.IMiss <= Icache.io.miss @[RPSWithOutCore.scala 61:12]
    io.DMiss <= Dcache.io.miss @[RPSWithOutCore.scala 62:12]
    io.instr_data <= Icache.io.outdata @[RPSWithOutCore.scala 63:17]
    io.data_rdata <= Dcache.io.outdata @[RPSWithOutCore.scala 64:17]
    Icache.io.addr <= io.instr_addr @[RPSWithOutCore.scala 67:18]
    Icache.io.writeMask <= UInt<1>("h0") @[RPSWithOutCore.scala 68:23]
    Icache.io.w_req <= UInt<1>("h0") @[RPSWithOutCore.scala 69:19]
    Icache.io.writedata <= UInt<1>("h0") @[RPSWithOutCore.scala 70:23]
    Dcache.io.addr <= io.data_addr @[RPSWithOutCore.scala 71:18]
    Dcache.io.writeMask <= io.data_be @[RPSWithOutCore.scala 72:23]
    Dcache.io.w_req <= io.data_we @[RPSWithOutCore.scala 73:19]
    Dcache.io.writedata <= io.data_wdata @[RPSWithOutCore.scala 74:23]
    Icache.io.r_req <= io.IRreq @[RPSWithOutCore.scala 76:19]
    Dcache.io.r_req <= io.DRreq @[RPSWithOutCore.scala 77:19]
    Icache.io.mem_rd_line[0] <= IcacheAXI.io.mem_rd_line[0] @[RPSWithOutCore.scala 80:25]
    Icache.io.mem_rd_line[1] <= IcacheAXI.io.mem_rd_line[1] @[RPSWithOutCore.scala 80:25]
    Icache.io.cacheAXI_gnt <= IcacheAXI.io.cacheAXI_gnt @[RPSWithOutCore.scala 81:26]
    Dcache.io.mem_rd_line[0] <= DcacheAXI.io.mem_rd_line[0] @[RPSWithOutCore.scala 82:25]
    Dcache.io.mem_rd_line[1] <= DcacheAXI.io.mem_rd_line[1] @[RPSWithOutCore.scala 82:25]
    Dcache.io.cacheAXI_gnt <= DcacheAXI.io.cacheAXI_gnt @[RPSWithOutCore.scala 83:26]
    IcacheAXI.io.mem_addr <= Icache.io.mem_addr @[RPSWithOutCore.scala 86:25]
    IcacheAXI.io.mem_rd_req <= Icache.io.mem_rd_req @[RPSWithOutCore.scala 87:27]
    IcacheAXI.io.mem_wr_req <= Icache.io.mem_wr_req @[RPSWithOutCore.scala 88:27]
    IcacheAXI.io.mem_wr_line[0] <= Icache.io.mem_wr_line[0] @[RPSWithOutCore.scala 89:28]
    IcacheAXI.io.mem_wr_line[1] <= Icache.io.mem_wr_line[1] @[RPSWithOutCore.scala 89:28]
    DcacheAXI.io.mem_addr <= Dcache.io.mem_addr @[RPSWithOutCore.scala 90:25]
    DcacheAXI.io.mem_rd_req <= Dcache.io.mem_rd_req @[RPSWithOutCore.scala 91:27]
    DcacheAXI.io.mem_wr_req <= Dcache.io.mem_wr_req @[RPSWithOutCore.scala 92:27]
    DcacheAXI.io.mem_wr_line[0] <= Dcache.io.mem_wr_line[0] @[RPSWithOutCore.scala 93:28]
    DcacheAXI.io.mem_wr_line[1] <= Dcache.io.mem_wr_line[1] @[RPSWithOutCore.scala 93:28]
    reg cid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[RPSWithOutCore.scala 95:20]
    node _T = eq(cid, UInt<1>("h0")) @[RPSWithOutCore.scala 106:12]
    when _T : @[RPSWithOutCore.scala 106:39]
      mem.io.TDATAW <= IcacheAXI.io.TDATAW @[RPSWithOutCore.scala 107:19]
      mem.io.TUSER <= IcacheAXI.io.TUSER @[RPSWithOutCore.scala 108:18]
      mem.io.TVALID <= IcacheAXI.io.TVALID @[RPSWithOutCore.scala 109:19]
      mem.io.TLAST <= IcacheAXI.io.TLAST @[RPSWithOutCore.scala 110:18]
      IcacheAXI.io.TREADY <= mem.io.TREADY @[RPSWithOutCore.scala 111:25]
      IcacheAXI.io.TDATAR <= mem.io.TDATAR @[RPSWithOutCore.scala 112:25]
      DcacheAXI.io.TREADY <= UInt<1>("h0") @[RPSWithOutCore.scala 113:25]
      DcacheAXI.io.TDATAR <= UInt<1>("h0") @[RPSWithOutCore.scala 114:25]
    else :
      node _T_1 = eq(cid, UInt<1>("h1")) @[RPSWithOutCore.scala 115:18]
      when _T_1 : @[RPSWithOutCore.scala 115:45]
        mem.io.TDATAW <= DcacheAXI.io.TDATAW @[RPSWithOutCore.scala 116:19]
        mem.io.TUSER <= DcacheAXI.io.TUSER @[RPSWithOutCore.scala 117:18]
        mem.io.TVALID <= DcacheAXI.io.TVALID @[RPSWithOutCore.scala 118:19]
        mem.io.TLAST <= DcacheAXI.io.TLAST @[RPSWithOutCore.scala 119:18]
        DcacheAXI.io.TREADY <= mem.io.TREADY @[RPSWithOutCore.scala 120:25]
        DcacheAXI.io.TDATAR <= mem.io.TDATAR @[RPSWithOutCore.scala 121:25]
        IcacheAXI.io.TREADY <= UInt<1>("h0") @[RPSWithOutCore.scala 122:25]
        IcacheAXI.io.TDATAR <= UInt<1>("h0") @[RPSWithOutCore.scala 123:25]
      else :
        mem.io.TDATAW <= UInt<1>("h0") @[RPSWithOutCore.scala 125:19]
        mem.io.TUSER <= UInt<1>("h0") @[RPSWithOutCore.scala 126:18]
        mem.io.TVALID <= UInt<1>("h0") @[RPSWithOutCore.scala 127:19]
        mem.io.TLAST <= UInt<1>("h0") @[RPSWithOutCore.scala 128:18]
        DcacheAXI.io.TREADY <= UInt<1>("h0") @[RPSWithOutCore.scala 129:25]
        DcacheAXI.io.TDATAR <= UInt<1>("h0") @[RPSWithOutCore.scala 130:25]
        IcacheAXI.io.TREADY <= UInt<1>("h0") @[RPSWithOutCore.scala 131:25]
        IcacheAXI.io.TDATAR <= UInt<1>("h0") @[RPSWithOutCore.scala 132:25]
    node _T_2 = eq(cid, UInt<1>("h0")) @[RPSWithOutCore.scala 137:12]
    when _T_2 : @[RPSWithOutCore.scala 137:39]
      node _T_3 = eq(IcacheAXI.io.TUSER, UInt<1>("h0")) @[RPSWithOutCore.scala 138:29]
      when _T_3 : @[RPSWithOutCore.scala 138:50]
        cid <= UInt<1>("h1") @[RPSWithOutCore.scala 139:11]
    else :
      node _T_4 = eq(cid, UInt<1>("h1")) @[RPSWithOutCore.scala 141:18]
      when _T_4 : @[RPSWithOutCore.scala 141:45]
        node _T_5 = eq(DcacheAXI.io.TUSER, UInt<1>("h0")) @[RPSWithOutCore.scala 142:29]
        when _T_5 : @[RPSWithOutCore.scala 142:50]
          cid <= UInt<1>("h0") @[RPSWithOutCore.scala 143:11]

